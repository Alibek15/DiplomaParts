// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: coworking_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoworkingService_GetRoomByID_FullMethodName = "/coworking.CoworkingService/GetRoomByID"
	CoworkingService_GetSeatByID_FullMethodName = "/coworking.CoworkingService/GetSeatByID"
)

// CoworkingServiceClient is the client API for CoworkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoworkingServiceClient interface {
	GetRoomByID(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	GetSeatByID(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error)
}

type coworkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoworkingServiceClient(cc grpc.ClientConnInterface) CoworkingServiceClient {
	return &coworkingServiceClient{cc}
}

func (c *coworkingServiceClient) GetRoomByID(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, CoworkingService_GetRoomByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingServiceClient) GetSeatByID(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatResponse)
	err := c.cc.Invoke(ctx, CoworkingService_GetSeatByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoworkingServiceServer is the server API for CoworkingService service.
// All implementations must embed UnimplementedCoworkingServiceServer
// for forward compatibility.
type CoworkingServiceServer interface {
	GetRoomByID(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	GetSeatByID(context.Context, *GetSeatRequest) (*GetSeatResponse, error)
	mustEmbedUnimplementedCoworkingServiceServer()
}

// UnimplementedCoworkingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoworkingServiceServer struct{}

func (UnimplementedCoworkingServiceServer) GetRoomByID(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomByID not implemented")
}
func (UnimplementedCoworkingServiceServer) GetSeatByID(context.Context, *GetSeatRequest) (*GetSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatByID not implemented")
}
func (UnimplementedCoworkingServiceServer) mustEmbedUnimplementedCoworkingServiceServer() {}
func (UnimplementedCoworkingServiceServer) testEmbeddedByValue()                          {}

// UnsafeCoworkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoworkingServiceServer will
// result in compilation errors.
type UnsafeCoworkingServiceServer interface {
	mustEmbedUnimplementedCoworkingServiceServer()
}

func RegisterCoworkingServiceServer(s grpc.ServiceRegistrar, srv CoworkingServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoworkingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoworkingService_ServiceDesc, srv)
}

func _CoworkingService_GetRoomByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServiceServer).GetRoomByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoworkingService_GetRoomByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServiceServer).GetRoomByID(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoworkingService_GetSeatByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServiceServer).GetSeatByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoworkingService_GetSeatByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServiceServer).GetSeatByID(ctx, req.(*GetSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoworkingService_ServiceDesc is the grpc.ServiceDesc for CoworkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoworkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coworking.CoworkingService",
	HandlerType: (*CoworkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoomByID",
			Handler:    _CoworkingService_GetRoomByID_Handler,
		},
		{
			MethodName: "GetSeatByID",
			Handler:    _CoworkingService_GetSeatByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coworking_service.proto",
}
